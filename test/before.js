// Generated by CoffeeScript 1.10.0
(function() {
  var Q, times;

  Q = require('q');

  times = 0;

  describe('Some suite with before and no retry', function() {
    var valueAll;
    valueAll = 0;
    before(function() {
      valueAll += 2;
      if (valueAll !== 2) {
        throw new Error("has to be 2");
      }
    });
    it('verifies the value', function() {
      return valueAll.should.equal(2);
    });
    return it('verifies the value again', function() {
      return valueAll.should.equal(2);
    });
  });

  describe('Some suite with before with retry', function() {
    var valueAll;
    valueAll = 0;
    before(2, function() {
      valueAll++;
      if (valueAll !== 2) {
        throw new Error("at least 2");
      }
    });
    it('verifies the value', function() {
      return valueAll.should.equal(2);
    });
    return it('verifies the value again', function() {
      return valueAll.should.equal(2);
    });
  });

  describe('Some suite with beforeEach and no retry', function() {
    var valueEach;
    valueEach = 0;
    beforeEach(function() {
      valueEach += 2;
      if (valueEach % 2 !== 0) {
        throw new Error("isnt even");
      }
    });
    it('verifies the value once', function() {
      return valueEach.should.equal(2);
    });
    return it('verifies the value twice', function() {
      return valueEach.should.equal(4);
    });
  });

  describe('Some suite with beforeEach with retry', function() {
    var valueEach;
    valueEach = 0;
    beforeEach(2, function() {
      valueEach++;
      if (valueEach % 2 !== 0) {
        throw new Error("isnt even");
      }
    });
    it('verifies the value once', function() {
      return valueEach.should.equal(2);
    });
    return it('verifies the value twice', function() {
      return valueEach.should.equal(4);
    });
  });

  describe('Before all using global default retry', function() {
    global.DEFAULT_RETRY = 2;
    return describe('inner suite (needed to apply global retry)', function() {
      var valueAll;
      valueAll = 0;
      before(function() {
        valueAll++;
        if (valueAll !== 2) {
          throw new Error("at least 2");
        }
      });
      it('verifies the value', function() {
        return valueAll.should.equal(2);
      });
      return it('verifies the value again', function() {
        return valueAll.should.equal(2);
      });
    });
  });

  delete global.DEFAULT_RETRY;

  describe('Before all With global default retry but overriding it', function() {
    global.DEFAULT_RETRY = 2;
    before(function() {
      return times = 0;
    });
    return describe('inner suite with specific retry (needed to apply global retry)', function() {
      var valueAll;
      valueAll = 0;
      before(3, function() {
        valueAll++;
        if (valueAll !== 3) {
          throw new Error("at least 3");
        }
      });
      it('verifies the value', function() {
        return valueAll.should.equal(3);
      });
      return it('verifies the value again', function() {
        return valueAll.should.equal(3);
      });
    });
  });

  delete global.DEFAULT_RETRY;

  describe('Before each using global default retry', function() {
    global.DEFAULT_RETRY = 2;
    return describe('inner suite (needed to apply global retry)', function() {
      var valueEach;
      valueEach = 0;
      beforeEach(function() {
        valueEach++;
        if (valueEach % 2 !== 0) {
          throw new Error("isnt even");
        }
      });
      it('verifies the value once', function() {
        return valueEach.should.equal(2);
      });
      return it('verifies the value twice', function() {
        return valueEach.should.equal(4);
      });
    });
  });

  delete global.DEFAULT_RETRY;

  describe('Before each With global default retry but overriding it', function() {
    global.DEFAULT_RETRY = 2;
    before(function() {
      return times = 0;
    });
    return describe('inner suite with specific retry (needed to apply global retry)', function() {
      var valueEach;
      valueEach = 0;
      beforeEach(3, function() {
        valueEach++;
        if (valueEach % 3 !== 0) {
          throw new Error("isnt three");
        }
      });
      it('verifies the value once', function() {
        return valueEach.should.equal(3);
      });
      return it('verifies the value twice', function() {
        return valueEach.should.equal(6);
      });
    });
  });

  delete global.DEFAULT_RETRY;

}).call(this);
